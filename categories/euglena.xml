<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Evolving NXT (Euglena)</title><link>https://entron.github.io/evolvingnxt_blog</link><description></description><atom:link rel="self" type="application/rss+xml" href="https://entron.github.io/evolvingnxt_blog/categories/euglena.xml"></atom:link><language>en</language><lastBuildDate>Wed, 03 Feb 2016 19:12:47 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Random Light Finder (Matlab version)</title><link>https://entron.github.io/evolvingnxt_blog/posts/201104random-light-finder-matlab-version.html</link><dc:creator>Cheng Guo</dc:creator><description>&lt;p&gt;Today I found some time to play with the Lego NXT, and I wrote the matlab version of the &lt;a href="http://evolvingnxt.blogspot.com/2010/10/random-walker-v3.html" target="_blank"&gt;random light finder&lt;/a&gt;. The matlab program is shown below. It works quite well. With matlab I can now easily implement more sophisticated algorithm.&lt;br&gt;&lt;br&gt;The robot can now effectively avoid obstacles, and I don't need to help it get out of somewhere from time to time. The program can also plot the light sensor data while the robot moves around. It is very slow to find the light because it's a random walker just like the Euglena.&lt;br&gt;&lt;br&gt;The code is &lt;a href="http://code.google.com/p/evolvingnxt/source/browse/euglena/random.m"&gt;here&lt;/a&gt;.&lt;br&gt;&lt;br&gt;Most of the code are straight forward, there is only one line I need to put some more words.&lt;br&gt;&lt;br&gt;&lt;em&gt;abs(lightdata(step)-lightdata(step-1))&amp;lt;5 &lt;/em&gt;means the light intensity almost unchanged compare to the last step. This could because the Robot get stuck somewhere and can't move forward. It also could because it goes to a dark regime where the light is always very low therefore hardly changes. The robot should avoid both the situations, so I let the robot go backwards a little bit in these two cases.&lt;br&gt;&lt;br&gt;&lt;em&gt;&lt;br&gt;&lt;/em&gt;&lt;/p&gt;</description><category>Euglena</category><guid>https://entron.github.io/evolvingnxt_blog/posts/201104random-light-finder-matlab-version.html</guid><pubDate>Sat, 23 Apr 2011 18:24:00 GMT</pubDate></item><item><title>Memo v1</title><link>https://entron.github.io/evolvingnxt_blog/posts/201010memo-v1.html</link><dc:creator>Cheng Guo</dc:creator><description>&lt;p&gt;"Memo" is the program which will save light intensity value and compare the current light intensity with the saved one to make decision what to do next. The program is &lt;a href="http://code.google.com/p/evolvingnxt/downloads/detail?name=Memo%20v1.rbt&amp;amp;can=2&amp;amp;q="&gt;here&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-JQTXRqCSd6k/ToXkrmOE9lI/AAAAAAAAABI/0Br4f8NSi5I/s1600/memo-v1d.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="110" src="http://2.bp.blogspot.com/-JQTXRqCSd6k/ToXkrmOE9lI/AAAAAAAAABI/0Br4f8NSi5I/s640/memo-v1d.png" width="640"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;When I program this version I also realized how difficult to program with NXT-G for a more complicated program. Therefore from now on I will use matlab to program NXT.</description><category>Euglena</category><guid>https://entron.github.io/evolvingnxt_blog/posts/201010memo-v1.html</guid><pubDate>Sun, 31 Oct 2010 22:17:00 GMT</pubDate></item><item><title>Random Light Finder v3</title><link>https://entron.github.io/evolvingnxt_blog/posts/201010random-walker-v3.html</link><dc:creator>Cheng Guo</dc:creator><description>&lt;p&gt;In this version I add the function to use the ultrasonic sensor to detect approaching objects and let the NXT to avoid it. It works, though there are still some "bugs" partly because the limitation of the sensor (Can't detect object which doesn't reflect ultrasonic wave well and can't detect if the object is too close).&lt;br&gt;&lt;br&gt;Flowing are the photos to show how to build the Random Light Finder v3 and the setup up.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-agH7PKNMGYw/ToXfmyEXHuI/AAAAAAAAAA4/1hiJYNrGyXk/s1600/p1030367.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="266" src="http://4.bp.blogspot.com/-agH7PKNMGYw/ToXfmyEXHuI/AAAAAAAAAA4/1hiJYNrGyXk/s400/p1030367.jpg" width="400"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;Not that the facing direction (look up/down) of the ultrasonic sensor can be controlled by Motor B. I don't alter the direction in this version, but I will probably explore the possibility in the future version.&lt;br&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-dVQgr-5RLdc/ToXfpgvQ4bI/AAAAAAAAABA/e5P_zk-oqcA/s1600/p1030369.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="266" src="http://2.bp.blogspot.com/-dVQgr-5RLdc/ToXfpgvQ4bI/AAAAAAAAABA/e5P_zk-oqcA/s400/p1030369.jpg" width="400"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;The program Â &lt;a href="http://code.google.com/p/evolvingnxt/downloads/detail?name=Random%20Light%20Finder%20v3.rbt&amp;amp;can=2&amp;amp;q="&gt;can be downloaded here&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-lKj0FBuqlLE/ToXf7jHfl9I/AAAAAAAAABE/dwlF2URpSqg/s1600/random-light-finder-v3d.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="132" src="http://3.bp.blogspot.com/-lKj0FBuqlLE/ToXf7jHfl9I/AAAAAAAAABE/dwlF2URpSqg/s640/random-light-finder-v3d.png" width="640"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;</description><category>Euglena</category><guid>https://entron.github.io/evolvingnxt_blog/posts/201010random-walker-v3.html</guid><pubDate>Sun, 24 Oct 2010 12:22:00 GMT</pubDate></item><item><title>Random Light Finder v2</title><link>https://entron.github.io/evolvingnxt_blog/posts/201010random-walker-v2.html</link><dc:creator>Cheng Guo</dc:creator><description>&lt;p&gt;After spend some hours to get more familiar with the functions of NXT-G blocks. I simplified the algorithm. The new version&lt;a href="http://code.google.com/p/evolvingnxt/downloads/detail?name=Random%20Light%20Finder%20v2.rbt&amp;amp;can=2&amp;amp;q="&gt; can be downloaded here&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-MTnzk0jeKQo/ToXdWnkUsBI/AAAAAAAAAAw/JnD6nioRdTw/s1600/random-light-finder-v2d.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="172" src="http://4.bp.blogspot.com/-MTnzk0jeKQo/ToXdWnkUsBI/AAAAAAAAAAw/JnD6nioRdTw/s640/random-light-finder-v2d.png" width="640"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;I also write a more simplified version in which I only let NXT rotate instead of both rotate and go forward. One can use this program to find the direction of the light (for example the redirect of the window). &lt;a href="http://code.google.com/p/evolvingnxt/downloads/detail?name=Rondom%20Light%20Finder%20%28Window%20Light%29.rbt&amp;amp;can=2&amp;amp;q="&gt;Download the rbt file here&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-vUf0rzYk_5g/ToXddfB-ilI/AAAAAAAAAA0/3zty-k1jpQ8/s1600/rondom-light-finder-v2-window-lightd.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="274" src="http://3.bp.blogspot.com/-vUf0rzYk_5g/ToXddfB-ilI/AAAAAAAAAA0/3zty-k1jpQ8/s640/rondom-light-finder-v2-window-lightd.png" width="640"&gt;&lt;/a&gt;&lt;/div&gt;</description><category>Euglena</category><guid>https://entron.github.io/evolvingnxt_blog/posts/201010random-walker-v2.html</guid><pubDate>Sun, 24 Oct 2010 00:20:00 GMT</pubDate></item><item><title>Random Light Finder v1</title><link>https://entron.github.io/evolvingnxt_blog/posts/201010random-walker-v1.html</link><dc:creator>Cheng Guo</dc:creator><description>&lt;p&gt;The first scheme I used is let the robot do random walk and stops when is light is stronger than a threshold.&lt;br&gt;&lt;br&gt;I use the software NTX-G which is within the Lego NXT 8527 package to program it. Below is the illustration of the program, and the program is attached.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-xBV78uKZyPU/ToXV9PwRvDI/AAAAAAAAAAs/mc_f3QzUf1k/s1600/random-light-finderd.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="259" src="http://4.bp.blogspot.com/-xBV78uKZyPU/ToXV9PwRvDI/AAAAAAAAAAs/mc_f3QzUf1k/s640/random-light-finderd.png" width="640"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;I put my desktop lamp on the floor as the light source. When NXT is with 30cm and faces to the lamp I get a light intensity over 70%, therefore I set 70% as the threshold in the program to tell NXT to stop.&lt;br&gt;&lt;br&gt;&lt;a href="http://code.google.com/p/evolvingnxt/downloads/detail?name=Random%20Light%20Finder.rbt&amp;amp;can=2&amp;amp;q="&gt;Download the program here.&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;</description><category>Euglena</category><guid>https://entron.github.io/evolvingnxt_blog/posts/201010random-walker-v1.html</guid><pubDate>Mon, 04 Oct 2010 23:18:00 GMT</pubDate></item><item><title>Project Introduction</title><link>https://entron.github.io/evolvingnxt_blog/posts/201010project-introduction.html</link><dc:creator>Cheng Guo</dc:creator><description>&lt;p&gt;With the project &lt;em&gt;&lt;em&gt;&lt;strong&gt;Euglena &lt;/strong&gt;&lt;/em&gt;&lt;/em&gt;I want to build a Lego NXT robot to find light. The name "Euglena" comes from the single-cell organism which can sense light and swim to it.&lt;br&gt;&lt;br&gt;The sensor I am using is the light sensorÂ  and maybe also the ultrasonic sensor to avoid collision.&lt;br&gt;&lt;br&gt;I will put all the programs and building instruction here, so that people who interested can reproduce it.&lt;/p&gt;</description><category>Euglena</category><guid>https://entron.github.io/evolvingnxt_blog/posts/201010project-introduction.html</guid><pubDate>Mon, 04 Oct 2010 22:49:00 GMT</pubDate></item></channel></rss>