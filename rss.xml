<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Evolving NXT</title><link>https://entron.github.io/evolvingnxt_blog</link><description>The notebook of my Lego Mindstorms NXT projects.</description><atom:link rel="self" type="application/rss+xml" href="https://entron.github.io/evolvingnxt_blog/rss.xml"></atom:link><language>en</language><lastBuildDate>Wed, 03 Feb 2016 19:12:48 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>celegans project introduction</title><link>https://entron.github.io/evolvingnxt_blog/posts/201110celegans-project-introduction.html</link><dc:creator>Cheng Guo</dc:creator><description>&lt;p&gt;In the previous euglena project, I programmed some simple searching algorithm for the NXT robot to find light. With the celegans project I will go a biotic approach, more specifically I will design a neuron network to control the robot to achieve the same aim (find light) as euglena instead of programming by myself. Here programming I mean the traditional "if...then..." style programming. To design a neural network to realize certain task, generally speaking, is also programming, but I would rather call this kind programming "neuroprogramming". Neuroprogramming is different with conventional programming. It is fundamentally parallel, thus needs a very different programming paradigm. celegans could be a good model to try. The name is from "c. elegans", which is a tiny worm only 1mm long, and it is the simplest intensively-studied model organism with neural system.&lt;br&gt;&lt;br&gt;I will use 1 light sensor to detect light and two motors for the movement. Therefore at least 3 neurons are needed: 1 sensor neuron, 2 motor neurons. Are three neurons enough? I guess probably not for an efficient light finder. To find the light source the robot should know the change of light intensity. It might be necessary to include more interneurons for this function.&lt;br&gt;&lt;br&gt;During the past few months I have read quite a few papers in neural science to gain some inspiration from the real neural systems. Some of which are about c. elegans. Even though I expected for c. elegans to survive it should do something similar like finding the light I was still a bit surprised to read that the neural network the real c. elegans used could be directly applied on my NXT robot! The only difference is c.~elegans is more interested chemicals rather than light, so light intensity is replaced by chemical concentration for c. elegans. Other than this everything is almost the same. I found the following facts about c. elegans' chemotaxis:&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;It only uses 1 sensor neuron.&lt;/li&gt;&lt;li&gt;Effectively it uses 2  motor neuros to control the left and right side of the muscles.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Neurocircuits it might be using has been proposed, for example &lt;a href="http://edizquierdo.wordpress.com/2010/08/05/evolution-and-analysis-of-minimal-neural-circuits-for-klinotaxis-in-c-elegans/"&gt;Eduardo Izquierdo used a genetical algorithm to find some working minimal neural networks&lt;/a&gt; (&lt;span style="font-family: MyriadMM; font-size: 8pt;"&gt;The Journal of Neuroscience, September 29, 2010 &lt;/span&gt;&lt;span style="font-family: MyriadMM; font-size: 7pt;"&gt;• &lt;/span&gt;&lt;span style="font-family: MyriadMM; font-size: 8pt;"&gt;30(39):12908 –12917&lt;/span&gt;); I especially like &lt;a href="http://www.csi.uoregon.edu/projects/celegans/talks/nips1996poster.html"&gt;the work by T. C. Ferree et al&lt;/a&gt;. Indeed ten years ago, they have done exactly the same thing I want to do now: use the neural network to control the robot to find light! Here is their paper "&lt;a href="http://chinook.uoregon.edu/papers/ab1998.pdf"&gt;Robust spatial navigation in a robot inspired by chemotaxis in c. elegans&lt;/a&gt;". Therefore as the first step I will simply repeat their work based on NXTCamel. The photo below is their modeling of the car from the paper. NXTCamel is designed to have a equivalent  driving system as their model.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-uSCxIKA96co/TqF1YqDOWJI/AAAAAAAAAB0/kb4yfNL8bYI/s1600/Screen+Shot+2011-10-21+at+3.34.00+PM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="320" src="http://4.bp.blogspot.com/-uSCxIKA96co/TqF1YqDOWJI/AAAAAAAAAB0/kb4yfNL8bYI/s320/Screen+Shot+2011-10-21+at+3.34.00+PM.png" width="280"&gt;&lt;/a&gt;&lt;/div&gt;</description><category>celegans</category><guid>https://entron.github.io/evolvingnxt_blog/posts/201110celegans-project-introduction.html</guid><pubDate>Fri, 21 Oct 2011 14:28:00 GMT</pubDate></item><item><title>NXTCamel example</title><link>https://entron.github.io/evolvingnxt_blog/posts/201110system-check-example.html</link><dc:creator>Cheng Guo</dc:creator><description>&lt;p&gt;I wrote a matlab function checksystem.m to check whether all motors and sensors are working on &lt;a href="http://evolvingnxt.blogspot.com/2011/09/nxtcamel.html"&gt;NXTCamel&lt;/a&gt; as I expected (I didn't test the sound and touch sensor in the first version of the function). The program can be downloaded &lt;a href="http://code.google.com/p/evolvingnxt/source/browse/nxtcamel/checksystem.m"&gt;here&lt;/a&gt;. Before you running this program you should make sure:&lt;br&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;The RWTH Mindstorms NXT Toolbox for matlab is installed correctly and you could connect to NXT within matlab using bluetooth without any error.&lt;/li&gt;&lt;li&gt;All sensors and motors are connected to the same ports as in the &lt;a href="http://code.google.com/p/evolvingnxt/downloads/detail?name=nxtcamel_building_instruction.tar.gz&amp;amp;can=2&amp;amp;q="&gt;building instruction&lt;/a&gt;. &lt;/li&gt;&lt;li&gt;The ultrasonic sensor is facing to the right. I define this as the default starting position.&lt;/li&gt;&lt;li&gt;You have enough space (at least 2 by 2 meter) for NXTCamel to run.&lt;/li&gt;&lt;/ol&gt;If everything works fine, the output in Matlab should look like the following:&lt;br&gt;&lt;br&gt;&lt;div style="background-color: #f9cb9c;"&gt;&lt;span style="font-size: x-small;"&gt;&lt;span style="font-family: Arial,Helvetica,sans-serif;"&gt;&amp;gt;&amp;gt; checksystem&lt;/span&gt;&lt;br style="font-family: Arial,Helvetica,sans-serif;"&gt;&lt;span style="font-family: Arial,Helvetica,sans-serif;"&gt;Make sure the ultrasonic sensor faces to the right side before you start.&lt;/span&gt;&lt;br style="font-family: Arial,Helvetica,sans-serif;"&gt;&lt;span style="font-family: Arial,Helvetica,sans-serif;"&gt;========Now test driving system========&lt;/span&gt;&lt;br style="font-family: Arial,Helvetica,sans-serif;"&gt;&lt;span style="font-family: Arial,Helvetica,sans-serif;"&gt;Drive forward for 3 second. Press any key to start...&lt;/span&gt;&lt;br style="font-family: Arial,Helvetica,sans-serif;"&gt;&lt;span style="font-family: Arial,Helvetica,sans-serif;"&gt;Drive backward for 3 second. Press any key to start...&lt;/span&gt;&lt;br style="font-family: Arial,Helvetica,sans-serif;"&gt;&lt;span style="font-family: Arial,Helvetica,sans-serif;"&gt;Turn left. Press any key to start...&lt;/span&gt;&lt;br style="font-family: Arial,Helvetica,sans-serif;"&gt;&lt;span style="font-family: Arial,Helvetica,sans-serif;"&gt;Turn right. Press any key to start...&lt;/span&gt;&lt;br style="font-family: Arial,Helvetica,sans-serif;"&gt;&lt;span style="font-family: Arial,Helvetica,sans-serif;"&gt;Back and turn. Press any key to start...&lt;/span&gt;&lt;br style="font-family: Arial,Helvetica,sans-serif;"&gt;&lt;span style="font-family: Arial,Helvetica,sans-serif;"&gt;Back and turn to the other direction. Press any key to start...&lt;/span&gt;&lt;br style="font-family: Arial,Helvetica,sans-serif;"&gt;&lt;span style="font-family: Arial,Helvetica,sans-serif;"&gt;========Driving system test finished========&lt;/span&gt;&lt;br style="font-family: Arial,Helvetica,sans-serif;"&gt;&lt;span style="font-family: Arial,Helvetica,sans-serif;"&gt;========Now test the sonar system========&lt;/span&gt;&lt;br style="font-family: Arial,Helvetica,sans-serif;"&gt;&lt;span style="font-family: Arial,Helvetica,sans-serif;"&gt;Sweep sonar and measure the distance. Press any key to start...&lt;/span&gt;&lt;br style="font-family: Arial,Helvetica,sans-serif;"&gt;&lt;span style="font-family: Arial,Helvetica,sans-serif;"&gt;========Sonar test finished========&lt;/span&gt;&lt;br style="font-family: Arial,Helvetica,sans-serif;"&gt;&lt;span style="font-family: Arial,Helvetica,sans-serif;"&gt;Light intensity is 42.3%&lt;/span&gt;&lt;br style="font-family: Arial,Helvetica,sans-serif;"&gt;&lt;span style="font-family: Arial,Helvetica,sans-serif;"&gt;========All test finished========&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div style="font-family: inherit;"&gt;&lt;span style="font-size: small;"&gt;It will also plot the distance measured by the ultrasonic sensor in a polar plot like this:&lt;/span&gt;&lt;/div&gt;&lt;div style="font-family: inherit;"&gt;&lt;span style="font-size: small;"&gt;&lt;br&gt;&lt;/span&gt; &lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-vxIWNaXuKgE/TqCwo5IDjXI/AAAAAAAAABs/aA1dIPCUZo0/s1600/distance.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://1.bp.blogspot.com/-vxIWNaXuKgE/TqCwo5IDjXI/AAAAAAAAABs/aA1dIPCUZo0/s1600/distance.png"&gt;&lt;/a&gt; &lt;/div&gt;&lt;div style="font-family: inherit;"&gt;&lt;br&gt;&lt;span style="font-size: small;"&gt;Note that the NXTCamel by definition is always facing the 90 degree (12 o'clock) direction. The number 100, 200, 300 in the plot is the distance in centimeter. I measured 10 points here. One could in principle sample more points and get a better representation of the surrounding environment though it will be slower.  &lt;/span&gt;&lt;/div&gt;&lt;div style="font-family: inherit;"&gt;&lt;span style="font-size: small;"&gt;&lt;br&gt;&lt;/span&gt; &lt;/div&gt;&lt;div style="font-family: inherit;"&gt;&lt;span style="font-size: small;"&gt;This distance information is naive compared with &lt;a href="http://spectrum.ieee.org/automaton/robotics/artificial-intelligence/how-google-self-driving-car-works"&gt;those from Google car&lt;/a&gt;&lt;/span&gt;.&lt;span style="font-size: small;"&gt; Nevertheless it is enough to let NXTCamel drive without hitting obstacles. &lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span style="font-size: small;"&gt;Update: &lt;/span&gt;&lt;br&gt;&lt;span style="font-size: small;"&gt;&lt;a href="http://code.google.com/p/evolvingnxt/source/browse/nxtcamel/drivenxtcamel.m"&gt;Here is an example&lt;/a&gt; with a simple algorithm, and I am sure there is still lot of space for improvement. Please let me know if you get a better way.&lt;/span&gt; &lt;/div&gt;</description><category>NXTCamel</category><guid>https://entron.github.io/evolvingnxt_blog/posts/201110system-check-example.html</guid><pubDate>Fri, 21 Oct 2011 00:50:00 GMT</pubDate></item><item><title>NXTCamel</title><link>https://entron.github.io/evolvingnxt_blog/posts/201109nxtcamel.html</link><dc:creator>Cheng Guo</dc:creator><description>&lt;p&gt;I spent almost a whole weekend to design and build this platform for my next project "c.elegans" and maybe other future projects. I named it as "NXTCamel" cause it looks bit like a camel with four long legs, and it can carry a lot!&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-6ff_5YLSEPU/ToYoUyHSsHI/AAAAAAAAABQ/ucHU0vjALPo/s1600/2.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="238" src="http://3.bp.blogspot.com/-6ff_5YLSEPU/ToYoUyHSsHI/AAAAAAAAABQ/ucHU0vjALPo/s320/2.jpg" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-oS_6Iy3exhQ/ToYoV1DaTcI/AAAAAAAAABU/kU8zgtAs2i4/s1600/3.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="239" src="http://2.bp.blogspot.com/-oS_6Iy3exhQ/ToYoV1DaTcI/AAAAAAAAABU/kU8zgtAs2i4/s320/3.jpg" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-wB-4NDmplFA/ToYoWzd5xUI/AAAAAAAAABY/gA6mlwrvx-o/s1600/Step65.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="240" src="http://1.bp.blogspot.com/-wB-4NDmplFA/ToYoWzd5xUI/AAAAAAAAABY/gA6mlwrvx-o/s320/Step65.png" width="320"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;The building instructions can be downloaded &lt;a href="http://code.google.com/p/evolvingnxt/downloads/detail?name=nxtcamel_building_instruction.tar.gz&amp;amp;can=2&amp;amp;q="&gt;here&lt;/a&gt;. Some features of NXTCamel are:&lt;br&gt;&lt;ul&gt;&lt;li&gt;All sensors are mounted and all motors are used. (Lego Mindstorms NXT 1.0)&lt;/li&gt;&lt;li&gt;It is like a car, two back wheels for driving, and two front wheels for controlling the direction.&lt;/li&gt;&lt;li&gt;All signal lines can be tightly attached to the body so they won't stuck to somewhere easily while moving around.&lt;/li&gt;&lt;li&gt;Ultrasonic sensor can rotate 360 degrees controlled by one motor to measure distance from any angle.&lt;/li&gt;&lt;li&gt;The body is flat, spacious and stable. I could easily mount for example a webcam or smart phone on it for more sophisticated projects. &lt;/li&gt;&lt;li&gt;It consists altogether 187 pieces.   &lt;/li&gt;&lt;/ul&gt;</description><category>NXTCamel</category><guid>https://entron.github.io/evolvingnxt_blog/posts/201109nxtcamel.html</guid><pubDate>Fri, 30 Sep 2011 21:58:00 GMT</pubDate></item><item><title>Connect from linux</title><link>https://entron.github.io/evolvingnxt_blog/posts/201109connect-from-linux.html</link><dc:creator>Cheng Guo</dc:creator><description>&lt;p&gt;Bought a very cheap Asus X54L laptop two weeks ago. I installed Ubuntu 11.04 on it. Cause there is no bluetooth adapter on the laptop I bought &lt;a href="http://www.amazon.de/LogiLink-Bluetooth-USB-Adapter-Class2-V2-0/dp/B0019D1LSW/ref=sr_1_4?ie=UTF8&amp;amp;qid=1317413780&amp;amp;sr=8-4"&gt;LogiLink Bluetooth USB-Adapter Class2 EDR V2.0&lt;/a&gt; on Amazon.de. It only costs about 3 Euros and works well with Lego NXT.&lt;br&gt;&lt;br&gt;I basically followed &lt;a href="http://www.mindstorms.rwth-aachen.de/trac/wiki/Download4.04"&gt;RWTH Mindstorms NXT toolbox instructions&lt;/a&gt; to successfully connect to Lego NXT without much difficulty. The only problem is for some unknown reason I need to connect twice with btconnect command provided by the toolbox to let Matlab recognize NXT.&lt;/p&gt;</description><category>Misc</category><guid>https://entron.github.io/evolvingnxt_blog/posts/201109connect-from-linux.html</guid><pubDate>Fri, 30 Sep 2011 21:25:00 GMT</pubDate></item><item><title>Random Light Finder (Matlab version)</title><link>https://entron.github.io/evolvingnxt_blog/posts/201104random-light-finder-matlab-version.html</link><dc:creator>Cheng Guo</dc:creator><description>&lt;p&gt;Today I found some time to play with the Lego NXT, and I wrote the matlab version of the &lt;a href="http://evolvingnxt.blogspot.com/2010/10/random-walker-v3.html" target="_blank"&gt;random light finder&lt;/a&gt;. The matlab program is shown below. It works quite well. With matlab I can now easily implement more sophisticated algorithm.&lt;br&gt;&lt;br&gt;The robot can now effectively avoid obstacles, and I don't need to help it get out of somewhere from time to time. The program can also plot the light sensor data while the robot moves around. It is very slow to find the light because it's a random walker just like the Euglena.&lt;br&gt;&lt;br&gt;The code is &lt;a href="http://code.google.com/p/evolvingnxt/source/browse/euglena/random.m"&gt;here&lt;/a&gt;.&lt;br&gt;&lt;br&gt;Most of the code are straight forward, there is only one line I need to put some more words.&lt;br&gt;&lt;br&gt;&lt;em&gt;abs(lightdata(step)-lightdata(step-1))&amp;lt;5 &lt;/em&gt;means the light intensity almost unchanged compare to the last step. This could because the Robot get stuck somewhere and can't move forward. It also could because it goes to a dark regime where the light is always very low therefore hardly changes. The robot should avoid both the situations, so I let the robot go backwards a little bit in these two cases.&lt;br&gt;&lt;br&gt;&lt;em&gt;&lt;br&gt;&lt;/em&gt;&lt;/p&gt;</description><category>Euglena</category><guid>https://entron.github.io/evolvingnxt_blog/posts/201104random-light-finder-matlab-version.html</guid><pubDate>Sat, 23 Apr 2011 18:24:00 GMT</pubDate></item><item><title>Finally I can use matlab to control Lego NXT on my macbook</title><link>https://entron.github.io/evolvingnxt_blog/posts/201012finally-i-can-use-matlab-to-control.html</link><dc:creator>Cheng Guo</dc:creator><description>&lt;p&gt;I got a license for matlab on my Macbook pro and I test to control nxt with &lt;a href="http://www.mindstorms.rwth-aachen.de/trac/wiki/Download" target="_blank"&gt;RWTH Aachen MINDSTORMS NXT Toolbox&lt;/a&gt;. With bluetooth it works very well though I haven't succeed to use USB.  Anyway, bluetooth is all I need, so that's alright for me. One thing I should note is that in the installation instruction( http://www.mindstorms.rwth-aachen.de/trac/wiki/Download4.04 ) there is a small mistake: only after you execute&lt;br&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;tt&gt;COM_OpenNXT('bluetooth.ini')&lt;/tt&gt;&lt;/blockquote&gt;&lt;br&gt;you get the sign on NXT change from &lt;strong&gt;B&amp;lt;&lt;/strong&gt; to &lt;strong&gt;B&amp;lt; &amp;gt;&lt;/strong&gt;&lt;br&gt;&lt;br&gt;I will experiment with the power of Matlab from now on!</description><category>Misc</category><guid>https://entron.github.io/evolvingnxt_blog/posts/201012finally-i-can-use-matlab-to-control.html</guid><pubDate>Wed, 22 Dec 2010 23:48:00 GMT</pubDate></item><item><title>Automatic design of Lego NXT robots</title><link>https://entron.github.io/evolvingnxt_blog/posts/201011automatic-design-of-lego-nxt-robots.html</link><dc:creator>Cheng Guo</dc:creator><description>&lt;p&gt;Building Lego NXT according to your imagination is lots of fun, but to figure out some really cool stuff is not easy. I was wondering whether there are some ways to automatically design Lego robots (in this blog entry I only concern about hardware) like those windows screen saver generating random forms of artificial life. After some research I found no one has done it yet. However, there are already lots of resources which maybe already enough for a group of very talented people to figure out how to design a Lego robot automatically. I will summarize what I have found in the following.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;h3&gt;        Background&lt;/h3&gt;I think the most promising way to automatically design a Lego robots is to follow the nature, namely using evolutionary mechanism. One uses Genetic Algorithm (GA) to search for a design fit to the need. This field of study is called "Evolving Hardware" or "Evolvable Hardware" (EHW).  This field is still in its preliminary stage. There are now two major directions in this field. The first one is evolvable electronics, which can be either digital or analog circus.   For digital circus, one can first design on a computer  using GA then test it with FPGA or build the evolutionary mechanism directly on the FPGA which can then achieve some adaptive advantage. Search "FPGA" with "Evolvable Hardware" on Google if you want to know about it. For analog circus there are fewer research though I think its also  a very promising direction. &lt;a href="http://ti.arc.nasa.gov/projects/esg/research/circuit.htm" target="_blank"&gt;Here&lt;/a&gt; is a group in NASA who are doing this kind of research.&lt;br&gt;&lt;br&gt;Another direction of EHW research is the evolutionary machines (objects). It is generally easier to simulate and test electronics than machines, therefore much fewer research can be found in this direction. The &lt;a href="http://ccsl.mae.cornell.edu/golem" target="_blank"&gt;Golem project&lt;/a&gt; at Cornell is probably one of the most earliest systematic try. A successful story to design antenna using GA can be found &lt;a href="http://ti.arc.nasa.gov/projects/esg/research/antenna.htm" target="_blank"&gt;here&lt;/a&gt;. To automatically design a Lego NXT robots lyes in this direction.&lt;br&gt;&lt;br&gt;&lt;h3&gt;        Outline&lt;/h3&gt;I don't think I can make an automatic design of NXT work by myself. It needs lots of work and has a high risk to be not accomplished after years of dedicated work.  However, I still list what I will do if I work on this project here. When I find more people I might start it.&lt;br&gt;&lt;br&gt;&lt;h4&gt;        Step 1 &lt;span style="font-size: 13px; font-weight: normal;"&gt;Map the Lego NXT robot's structure to a DNA like one dimensional representation&lt;/span&gt;&lt;/h4&gt;Probably one can label different types of the basic Lego building blocks with different id and parameters. I should choose a way of mapping so that the code itself could reflect the actual similarity and difference of the bricks. For example in the Lego NXT kit there are bars with different geometry, length and different types of holes. Let's say we have 4 bars. They are:&lt;br&gt;&lt;br&gt;No.1 Straight bar with 4 round holes.&lt;br&gt;&lt;br&gt;No.2 Straight bar with 3 round hole in a row and the last hole is a "+" hole. (If you have a Lego NXT, you know what I mean.)&lt;br&gt;&lt;br&gt;No.3 Straight bar with 5 round holes.&lt;br&gt;&lt;br&gt;No.4 L shape bar with one arm like No.2 and the seconde arm is a round hole.&lt;br&gt;&lt;br&gt;If I name them as "A", "B", "C", "D", both computer and people know nothing about the relation between them. That's a bad code.  A better way to call them is to use these names:&lt;br&gt;&lt;br&gt;BARoooo&lt;br&gt;&lt;br&gt;BARooox&lt;br&gt;&lt;br&gt;BARooooo&lt;br&gt;&lt;br&gt;BARolooox&lt;br&gt;&lt;br&gt;BAR is the name of the type. I think to use 3 capital letter for the type of bricks is a good option so you have enough variations to go beyond Lego NXT bricks.&lt;br&gt;&lt;br&gt;I can either give each bar a unique code like "A" for a straight bar with length 4 holes one it and "B" a straight  bar with 5 holes on it or better call them "BAR4" and "BAR5"&lt;br&gt;&lt;br&gt;(to be continued)</description><category>Misc</category><guid>https://entron.github.io/evolvingnxt_blog/posts/201011automatic-design-of-lego-nxt-robots.html</guid><pubDate>Sat, 20 Nov 2010 21:41:00 GMT</pubDate></item><item><title>Memo v1</title><link>https://entron.github.io/evolvingnxt_blog/posts/201010memo-v1.html</link><dc:creator>Cheng Guo</dc:creator><description>&lt;p&gt;"Memo" is the program which will save light intensity value and compare the current light intensity with the saved one to make decision what to do next. The program is &lt;a href="http://code.google.com/p/evolvingnxt/downloads/detail?name=Memo%20v1.rbt&amp;amp;can=2&amp;amp;q="&gt;here&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-JQTXRqCSd6k/ToXkrmOE9lI/AAAAAAAAABI/0Br4f8NSi5I/s1600/memo-v1d.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="110" src="http://2.bp.blogspot.com/-JQTXRqCSd6k/ToXkrmOE9lI/AAAAAAAAABI/0Br4f8NSi5I/s640/memo-v1d.png" width="640"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;When I program this version I also realized how difficult to program with NXT-G for a more complicated program. Therefore from now on I will use matlab to program NXT.</description><category>Euglena</category><guid>https://entron.github.io/evolvingnxt_blog/posts/201010memo-v1.html</guid><pubDate>Sun, 31 Oct 2010 22:17:00 GMT</pubDate></item><item><title>Random Light Finder v3</title><link>https://entron.github.io/evolvingnxt_blog/posts/201010random-walker-v3.html</link><dc:creator>Cheng Guo</dc:creator><description>&lt;p&gt;In this version I add the function to use the ultrasonic sensor to detect approaching objects and let the NXT to avoid it. It works, though there are still some "bugs" partly because the limitation of the sensor (Can't detect object which doesn't reflect ultrasonic wave well and can't detect if the object is too close).&lt;br&gt;&lt;br&gt;Flowing are the photos to show how to build the Random Light Finder v3 and the setup up.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-agH7PKNMGYw/ToXfmyEXHuI/AAAAAAAAAA4/1hiJYNrGyXk/s1600/p1030367.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="266" src="http://4.bp.blogspot.com/-agH7PKNMGYw/ToXfmyEXHuI/AAAAAAAAAA4/1hiJYNrGyXk/s400/p1030367.jpg" width="400"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;Not that the facing direction (look up/down) of the ultrasonic sensor can be controlled by Motor B. I don't alter the direction in this version, but I will probably explore the possibility in the future version.&lt;br&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-dVQgr-5RLdc/ToXfpgvQ4bI/AAAAAAAAABA/e5P_zk-oqcA/s1600/p1030369.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="266" src="http://2.bp.blogspot.com/-dVQgr-5RLdc/ToXfpgvQ4bI/AAAAAAAAABA/e5P_zk-oqcA/s400/p1030369.jpg" width="400"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;The program  &lt;a href="http://code.google.com/p/evolvingnxt/downloads/detail?name=Random%20Light%20Finder%20v3.rbt&amp;amp;can=2&amp;amp;q="&gt;can be downloaded here&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-lKj0FBuqlLE/ToXf7jHfl9I/AAAAAAAAABE/dwlF2URpSqg/s1600/random-light-finder-v3d.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="132" src="http://3.bp.blogspot.com/-lKj0FBuqlLE/ToXf7jHfl9I/AAAAAAAAABE/dwlF2URpSqg/s640/random-light-finder-v3d.png" width="640"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;</description><category>Euglena</category><guid>https://entron.github.io/evolvingnxt_blog/posts/201010random-walker-v3.html</guid><pubDate>Sun, 24 Oct 2010 12:22:00 GMT</pubDate></item><item><title>Random Light Finder v2</title><link>https://entron.github.io/evolvingnxt_blog/posts/201010random-walker-v2.html</link><dc:creator>Cheng Guo</dc:creator><description>&lt;p&gt;After spend some hours to get more familiar with the functions of NXT-G blocks. I simplified the algorithm. The new version&lt;a href="http://code.google.com/p/evolvingnxt/downloads/detail?name=Random%20Light%20Finder%20v2.rbt&amp;amp;can=2&amp;amp;q="&gt; can be downloaded here&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-MTnzk0jeKQo/ToXdWnkUsBI/AAAAAAAAAAw/JnD6nioRdTw/s1600/random-light-finder-v2d.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="172" src="http://4.bp.blogspot.com/-MTnzk0jeKQo/ToXdWnkUsBI/AAAAAAAAAAw/JnD6nioRdTw/s640/random-light-finder-v2d.png" width="640"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;I also write a more simplified version in which I only let NXT rotate instead of both rotate and go forward. One can use this program to find the direction of the light (for example the redirect of the window). &lt;a href="http://code.google.com/p/evolvingnxt/downloads/detail?name=Rondom%20Light%20Finder%20%28Window%20Light%29.rbt&amp;amp;can=2&amp;amp;q="&gt;Download the rbt file here&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-vUf0rzYk_5g/ToXddfB-ilI/AAAAAAAAAA0/3zty-k1jpQ8/s1600/rondom-light-finder-v2-window-lightd.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="274" src="http://3.bp.blogspot.com/-vUf0rzYk_5g/ToXddfB-ilI/AAAAAAAAAA0/3zty-k1jpQ8/s640/rondom-light-finder-v2-window-lightd.png" width="640"&gt;&lt;/a&gt;&lt;/div&gt;</description><category>Euglena</category><guid>https://entron.github.io/evolvingnxt_blog/posts/201010random-walker-v2.html</guid><pubDate>Sun, 24 Oct 2010 00:20:00 GMT</pubDate></item></channel></rss>